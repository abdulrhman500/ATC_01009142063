generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  middleName String    @default("")
  lastName   String
  email      String    @unique
  username   String    @unique
  password   String
  createdAt  DateTime  @default(now())
  role       Role
  bookings   Booking[]
}

model Event {
  id            Int                @id @default(autoincrement())
  name          String
  description   String
  date          DateTime
  venue         Venue              @relation(fields: [venueId], references: [id])
  venueId       Int
  photoUrl      String?
  priceValue    Float
  priceCurrency String
  category      Category?          @relation(fields: [categoryId], references: [id], onDelete: Restrict) // MODIFIED: onDelete: Restrict
  // Application Note: Before deleting a Category,
  // reassign Events to the "General" category (or null) via application logic.
  categoryId    Int?
  translations  EventTranslation[]
  bookings      Booking[]
  tags          EventTag[]
  //fts           Unsupported("tsvector")? 

   // Add this for full-text search on name and description
  //@@fulltext([name, description])
  // For PostgreSQL, you might want to specify the language if not default:
  // @@fulltext([name, description], language: "english")
  // Or create a tsvector column manually and index it if more control is needed.
  // For simplicity, Prisma's @@fulltext is a good start.
}

model EventTranslation {
  id           Int    @id @default(autoincrement())
  event        Event  @relation(fields: [eventId], references: [id], onDelete: Cascade) // Consider Cascade: if event is gone, translations for it are likely not needed.
  eventId      Int
  languageCode String // "en", "ar"
  name         String
  description  String

  @@unique([eventId, languageCode])
}

model Venue {
  id         Int     @id @default(autoincrement())
  name       String
  street     String
  city       String
  state      String
  country    String
  postalCode String?
  placeUrl   String?
  events     Event[]
}

model Booking {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  event   Event? @relation(fields: [eventId], references: [id], onDelete: SetNull) // MODIFIED: Relation is optional, onDelete: SetNull
  eventId Int? // MODIFIED: Foreign key is optional

  @@unique([userId, eventId])
}

model Category {
  id               Int        @id @default(autoincrement())
  name             String     @unique // Note: Not unique by default. "General" category would be one instance.
  parentCategory   Category?  @relation("CategoryToParent", fields: [parentCategoryId], references: [id], onDelete: Restrict) // MODIFIED: onDelete: Restrict
  // Application Note: Before deleting a parent Category,
  // reassign child Categories (or set parentId to null) via application logic.
  parentCategoryId Int?
  children         Category[] @relation("CategoryToParent")
  events           Event[]
}

model Tag {
  id     Int        @id @default(autoincrement())
  name   String     @unique
  events EventTag[]
}

model EventTag {
  id      Int   @id @default(autoincrement())
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade) // Consider Cascade: if event is gone, its tags associations are not needed.
  eventId Int
  tag     Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade) // Consider Cascade: if a tag is deleted, remove its association from events.
  tagId   Int

  @@unique([eventId, tagId])
}

enum Role {
  admin
  customer
}
